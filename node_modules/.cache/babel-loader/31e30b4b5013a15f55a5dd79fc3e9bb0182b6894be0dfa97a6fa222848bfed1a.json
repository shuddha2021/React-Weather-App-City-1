{"ast":null,"code":"var _jsxFileName = \"/Users/shuddha/Desktop/React Assignment/weather-app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Result from './components/Result';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'YOUR_API_KEY';\nconst App = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [color, setColor] = useState('orange'); // Add this line\n\n  const fetchWeather = async city => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&units=imperial&appid=${API_KEY}`);\n      if (response.ok) {\n        const data = await response.json();\n        const {\n          main,\n          weather,\n          wind,\n          name\n        } = data;\n        const temperature = main.temp;\n        const feels_like = main.feels_like;\n        const wind_speed = wind.speed;\n        const description = weather[0].description;\n        setWeatherData({\n          temperature,\n          feels_like,\n          wind_speed,\n          description,\n          city: name\n        });\n\n        // Add this switch statement\n        switch (description) {\n          case 'clear sky':\n            setColor('orange');\n            break;\n          case 'few clouds':\n            setColor('lightblue');\n            break;\n          case 'scattered clouds':\n            setColor('gray');\n            break;\n          case 'broken clouds':\n            setColor('darkgray');\n            break;\n          case 'shower rain':\n            setColor('blue');\n            break;\n          case 'rain':\n            setColor('navy');\n            break;\n          case 'thunderstorm':\n            setColor('purple');\n            break;\n          case 'snow':\n            setColor('white');\n            break;\n          case 'mist':\n            setColor('green');\n            break;\n          default:\n            setColor('orange');\n        }\n      } else {\n        setError(`Error fetching weather: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error fetching weather:', error);\n      setError(`Error fetching weather: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSearch: fetchWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Result, {\n      weatherData: weatherData,\n      loading: loading,\n      error: error,\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), \" // Pass the color prop\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"Uq5AYYklZh6k8QyIVu3sz4VsXt8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","Form","Result","jsxDEV","_jsxDEV","API_KEY","App","_s","weatherData","setWeatherData","loading","setLoading","error","setError","color","setColor","fetchWeather","city","response","fetch","encodeURIComponent","ok","data","json","main","weather","wind","name","temperature","temp","feels_like","wind_speed","speed","description","statusText","console","message","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","_c","$RefreshReg$"],"sources":["/Users/shuddha/Desktop/React Assignment/weather-app/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Result from './components/Result';\n\nconst API_KEY = 'YOUR_API_KEY';\n\ninterface WeatherData {\n  temperature: number;\n  feels_like: number;\n  wind_speed: number;\n  description: string;\n  city: string;\n}\n\nconst App: React.FC = () => {\n  const [weatherData, setWeatherData] = useState<WeatherData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [color, setColor] = useState('orange'); // Add this line\n\n  const fetchWeather = async (city: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(\n          `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(\n              city\n          )}&units=imperial&appid=${API_KEY}`\n      );\n      if (response.ok) {\n        const data = await response.json();\n        const { main, weather, wind, name } = data;\n        const temperature = main.temp;\n        const feels_like = main.feels_like;\n        const wind_speed = wind.speed;\n        const description = weather[0].description;\n        setWeatherData({ temperature, feels_like, wind_speed, description, city: name });\n\n        // Add this switch statement\n        switch (description) {\n          case 'clear sky':\n            setColor('orange');\n            break;\n          case 'few clouds':\n            setColor('lightblue');\n            break;\n          case 'scattered clouds':\n            setColor('gray');\n            break;\n          case 'broken clouds':\n            setColor('darkgray');\n            break;\n          case 'shower rain':\n            setColor('blue');\n            break;\n          case 'rain':\n            setColor('navy');\n            break;\n          case 'thunderstorm':\n            setColor('purple');\n            break;\n          case 'snow':\n            setColor('white');\n            break;\n          case 'mist':\n            setColor('green');\n            break;\n          default:\n            setColor('orange');\n        }\n      } else {\n        setError(`Error fetching weather: ${response.statusText}`);\n      }\n    } catch (error: any) {\n      console.error('Error fetching weather:', error);\n      setError(`Error fetching weather: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n      <div className=\"App\">\n        <Header title=\"Weather App\" />\n        <Form onSearch={fetchWeather} />\n        <Result weatherData={weatherData} loading={loading} error={error} color={color} /> // Pass the color prop\n      </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}